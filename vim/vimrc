"set nowrap
set backspace=indent,eol,start
set cindent
set guioptions=agit
set hidden
set hlsearch
"ignore case for buffer/file names
set wildignorecase
set ignorecase
set incsearch
set langmap=ч`,ю\\\\,ш[,щ],яq,вw,еe,рr,тt,ъy,уu,иi,оo,пp,аa,сs,дd,фf,гg,хh,йj,кk,лl,зz,ьx,цc,жv,бb,нn,мm,Ч~,Ю\|,Ш{,Щ},ЯQ,ВW,ЕE,РR,ТT,ЪY,УU,ИI,ОO,ПP,АA,СS,ДD,ФF,ГG,ХH,ЙJ,КK,ЛL,ЗZ,ЬX,ЦC,ЖV,БB,НN,МM
set laststatus=2
set mouse=
set mousehide
"set number
set nonumber
set shiftwidth=4
set smartcase
set tabstop=4
set errorformat&
set ruler
set novisualbell
set t_vb=
set ff=unix

"disable autocommenting on new line
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
"colorscheme default
colorscheme desert
"syntax off
syntax on

let s:hostname = substitute(system("hostname"), "\n", "", "")
let s:osname = substitute(system("uname -o"), "\n", "", "")
let s:haveReadSession = 0

"let s:user = "ivaila"
"let s:user = "stoiko"

let s:projectName = $ZPROJ

if s:projectName == "zhost"
    set expandtab
    let s:homeDir = "~/work/github/zhost"
    let s:appToRun = "zhost_dbg"
    let s:additionalCTagsDirs = ""
elseif s:projectName == "bgg"
    set expandtab
    let s:homeDir = "~/work/github/bgg"
    let s:appToRun = "bgg_dbg"
    let s:additionalCTagsDirs = "../zhost"
elseif s:projectName == "zps2"
    set expandtab
    let s:homeDir = "~/work/github/zps2"
    let s:additionalCTagsDirs = "../zhost"
elseif s:projectName == "zcom_client"
    set noexpandtab
    set errorformat=\ %#%f(%l\\\,%c):\ %m
    " use quotes
    let s:additionalSVNDirs = "\"../Scenes\" \"../Resources_Raw\" \"../Resources\""
elseif s:projectName == "chaos_client" 
    set noexpandtab
    set errorformat=\ %#%f(%l\\\,%c):\ %m
    " use quotes
    let s:additionalSVNDirs = "\"../Scenes\" \"../Resources_Raw\" \"../Resources\""
elseif s:projectName == "chaos_server"
    set noexpandtab
    set errorformat=\ %#%f(%l\\\,%c):\ %m
    let s:additionalSVNDirs = " \"../ChaosUnity/Assets/Scripts\" \
                            \"../ChaosUnity/Assets/Editor/Build\" "
else
    let s:additionalSVNDirs = ""
    set expandtab
endif

if s:osname == "Cygwin"
    let s:isWindows=1
else 
    let s:isWindows=0
endif

if s:hostname == "monster"
    "set guifont=Droid\ Sans\ Mono\ 9
    set guifont=Inconsolata\ 8 
elseif s:hostname == "laptop"
    set guifont=Inconsolata\ 9 
elseif s:hostname == "Phoenix"
    "set guifont=Lucida\ Console\ Semi-Condensed\ 10
    set guifont=Inconsolata\ Medium\ 10
    "set lines=90
elseif s:hostname == "Julian-PC"
    set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 8
    "set vb 
elseif s:hostname == "Koko"
    "set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 8
    set guifont=Inconsolata\ 10
else
    set guifont=Droid\ Sans\ Mono\ 9
endif

function! Build_f( ... )
    if ! s:isWindows
        execute "!killall xterm" 
    endif

    wall

    execute "cd " . a:1
    if ! s:haveReadSession
        execute "source vim_session" . "_" . s:projectName
        let s:haveReadSession = 1
    endif

    execute "make -f " . a:2 . "/Makefile"

    if s:projectName == "chaos_client" || s:projectName == "zcom_client"
        execute "!ctags -R " . a:2
    elseif s:projectName == "chaos_server"
        execute "!ctags -R " . a:2 . s:additionalSVNDirs
    elseif s:projectName == "pcsx2"
        execute "!ctags -R " . a:2 . "/" . " " . s:additionalSVNDirs
    elseif s:projectName != ""
        execute "!ctags -R " . a:2 . "/" . " " . s:additionalCTagsDirs
    else 
        execute "!ctags -R " . a:2 . " " . "engine"
    endif

    execute "mksession! vim_session" . "_" . s:projectName
endfunction

function! Run_f( ... )
    call Build_f( a:1, a:2, a:3 )

    let pathToExe = a:1 . "/" . a:2 . "/" . a:3

    if s:isWindows
        execute "!" . pathToExe . ".exe&"
    else
        execute "!killall xterm ; xterm -e \"" . pathToExe . "\"&"
    endif

endfunction

function! FindInFiles_f( ... )
    let cmdPref = "grep -riIFe \""
    let cmdSuf = " --exclude=*.meta --exclude-dir=.git --exclude-dir=.svn --exclude=Makefile --exclude=tags --exclude=*.csproj --exclude=*.xml --exclude=*.config --include=*.{c,cs,cpp,h,lua}" 
    if a:0 == 1 
        execute cmdPref . a:1 . "\" . " . s:additionalSVNDirs . cmdSuf
    elseif a:0 == 2 
        execute cmdPref . a:1 . "\" \"" . a:2 . "\" " . cmdSuf
    elseif a:0 == 3 
        execute cmdPref . a:1 . "\" \"" . a:2 . "\" \"" . a:3 . "\" " . cmdSuf
    elseif a:0 == 4 
        execute cmdPref . a:1 . "\" \"" . a:2 . "\" \"" . a:3 . "\" \"" . a:4 . "\" " . cmdSuf
    elseif a:0 == 5 
        execute cmdPref . a:1 . "\" \"" . a:2 . "\" \"" . a:3 . "\" \"" . a:4 . "\" \"" . a:5 . "\" " . cmdSuf
    else
        echo "Num of args not supported"
    endif
endfunction

function! SvnBlame()
   let line = line(".")
   setlocal nowrap
   " blame, ignoring white space changes
   !svn blame "%" -x-w "%" > /tmp/SVNblame_vim
   18 vsplit! /tmp/SVNblame_vim
   e /tmp/SVNblame_vim
   setlocal nomodified nowrap winwidth=1
   setlocal nonumber
   if has('&relativenumber') | setlocal norelativenumber | endif
   " return to original line
   exec "normal " . line . "G"
   " synchronize scrolling, and return to original window
   setlocal scrollbind
   wincmd p
   setlocal scrollbind
   syncbind
endfunction

function! SvnBlameOff()
   bd /tmp/SVNblame_vim
   setlocal noscrollbind
   setlocal wrap
endfunction

command! -nargs=+ FindInFiles call FindInFiles_f( <q-args>, "." )

if 0
    command! -nargs=0 Build call Build_f( "~/work/necropolis", "maria/eduworld" )
    map <F5> :Run "~/work/necropolis/maria/eduworld/eduworld_dbg" <CR>
elseif 0
    command! -nargs=0 Build call Build_f( "~/work/private", "imgui" )
    command! -nargs=0 Clean execute "!make -f ~/work/private/imgui/Makefile clean"
    command! -nargs=+ FindInFiles execute "grep -riIF -e \"" . <q-args> . "\" \"imgui\" \"engine\" --exclude-dir=.svn --exclude=tags" 
    map <F5> :Run "$HOME/work/private/imgui/imgui_dbg" <CR>
elseif s:projectName == "grid_fov"
    command! -nargs=0 Build call Build_f( "~/work/private", "grid_fov" )
    command! -nargs=0 Run call Run_f( "~/work/private", "grid_fov", "grid_fov_dbg" )
    command! -nargs=0 Clean execute "!make -f ~/work/private/grid_fov/Makefile clean"
    command! -nargs=+ FindInFiles execute "grep -riIF -e \"" . <q-args> . "\" \"grid_fov\" \"engine\" --exclude-dir=.svn --exclude=tags" 
elseif s:projectName == "laser_chess"
    command! -nargs=0 Build call Build_f( "~/work/private", "laser_chess" )
    command! -nargs=0 Run call Run_f( "~/work/private", "laser_chess", "laser_chess_dbg" )
    command! -nargs=0 Clean execute "!make -f ~/work/private/laser_chess/Makefile clean"
    command! -nargs=+ FindInFiles execute "grep -riIF -e \"" . <q-args> . "\" \"laser_chess\" \"engine\" --exclude-dir=.svn --exclude=tags" 
elseif 0
    command! -nargs=0 Build call Build_f( "~/work/private", "necropolis" )
    command! -nargs=0 Run call Run_f( "~/work/private", "necropolis", "necropolis_dbg" )
    command! -nargs=0 Clean execute "!make -f ~/work/private/necropolis/Makefile clean"
    command! -nargs=+ FindInFiles execute "grep -riIF -e \"" . <q-args> . "\" \"necropolis\" \"engine\" --exclude-dir=.svn --exclude=tags" 
elseif 0
    command! -nargs=0 Build call Build_f( "~/work/private", "ai_demo" )
    command! -nargs=0 Clean execute "!make -f ~/work/private/ai_demo/Makefile clean"
    command! -nargs=+ FindInFiles execute "grep -riIF -e \"" . <q-args> . "\" \"necropolis\" \"engine\" \"ai_demo\" --exclude-dir=.svn --exclude=tags" 
    map <F5> :Run "$HOME/work/private/ai_demo/ai_demo_dbg" <CR>
"elseif 1
"   command! -nargs=0 Build call Build_f( "~/work/private", "toonfx" )
"   command! -nargs=0 Clean execute "!make -f ~/work/private/toonfx/Makefile clean"
"   command! -nargs=+ FindInFiles execute "grep -riIF -e \"" . <q-args> . "\" \"necropolis\" \"engine\" \"ai_demo\" --exclude-dir=.svn --exclude=tags" 
"   map <F5> :Run "$HOME/work/private/toonfx/toonfx_dbg" <CR>
elseif 0
    command! -nargs=0 Build call Build_f( "~/work/playvpx", "." )
    map <F5> :Run "~/work/playvpx/playvpx" <CR>
elseif 0
    command! -nargs=0 Build call Build_f( "~/work/ioquake3", "." )
    map <F5> :Run "~/work/ioquake3/build/release-linux-i386/ioquake3.i386" <CR>
elseif s:projectName == "zcom_client"
    if s:hostname == "Julian-PC"
        command! -nargs=0 Build call Build_f( "/cygdrive/e/chaos/trunk/PhoenixPoint/PhoenixPointUnity/Assets/Code", "." )
    elseif s:hostname == "Koko"
        command! -nargs=0 Build call Build_f( "/cygdrive/c/chaos/trunk/PhoenixPoint/PhoenixPointUnity/Assets/Code", "." )
    elseif s:hostname == "monster"
        command! -nargs=0 Build call Build_f( "/home/stoiko/work/chaos/trunk/PhoenixPoint/PhoenixPointUnity/Assets/Code", "." )
    endif
elseif s:projectName == "pcsx2"
    if s:hostname == "Julian-PC"
        command! -nargs=0 Build call Build_f( "/tmp/pcsx2", "." )
    else
        command! -nargs=0 Build call Build_f( "~/work/pcsx2-master", "." )
    endif
elseif s:projectName == "chaos_client"
    if s:hostname == "Julian-PC"
        command! -nargs=0 Build call Build_f( "/cygdrive/e/chaos/trunk/ChaosReborn/ChaosUnity/Assets/Scripts", "." )
        "command! -nargs=0 Build call Build_f( "/cygdrive/e/chaos/branches/ChaosRebornRC/ChaosUnity/Assets/Scripts", "." )
        "command! -nargs=0 Build call Build_f( "/cygdrive/e/chaos/branches/ChaosUnity5/ChaosUnity/Assets/Scripts", "." )
        "command! -nargs=0 Build call Build_f( "/cygdrive/e/chaos_build/trunk/ChaosReborn/ChaosUnity/Assets/Scripts", "." )
        "command! -nargs=0 Build call Build_f( "/cygdrive/e/chaos_build/branches/ChaosRebornRC/ChaosUnity/Assets/Scripts", "." )
    elseif s:hostname == "Koko"
        command! -nargs=0 Build call Build_f( "/cygdrive/c/chaos/trunk/ChaosReborn/ChaosUnity/Assets/Scripts", "." )
    endif
elseif s:projectName == "chaos_server"
    if s:hostname == "Koko"
        command! -nargs=0 Build call Build_f( "/cygdrive/c/chaos/trunk/ChaosReborn/ChaosServer", "." )
    else
        command! -nargs=0 Build call Build_f( "/cygdrive/e/chaos/trunk/ChaosReborn/ChaosServer", "." )
    endif
    command! -nargs=+ FindInFiles call FindInFiles_f( <q-args> )
elseif s:projectName != ""
    command! -nargs=0 Build call Build_f( s:homeDir, "." )
    command! -nargs=0 Run call Run_f( s:homeDir, ".", s:appToRun )
    command! -nargs=+ FindInFiles call FindInFiles_f( <q-args>, ".", s:additionalCTagsDirs )
else
    command! Build echo "Build: did you specify $ZPROJ? If yes, enable the build configuration for '" . s:projectName . "' in vimrc first"
endif

command! -nargs=0 SVNdiffoff        execute "bd /tmp/" . expand("%:t") | diffoff!
command! -nargs=0 SVNdiff           diffoff! | execute "!svn export --force \"%\" /tmp/%:t -r COMMITTED" | vert diffsplit /tmp/%:t | wincmd x | goto
command! -nargs=0 SVNprev           diffoff! | execute "!svn export --force \"%\" /tmp/%:t -r PREV" | vert diffsplit /tmp/%:t | wincmd x | goto
command! -nargs=0 SVNstatus         e /tmp/SVNstatus_vim | bd /tmp/SVNstatus_vim | execute "!svn status $(ls) " . s:additionalSVNDirs . " | sort | grep -ve ^[?I] -ve \.mat > /tmp/SVNstatus_vim" | 10split | e /tmp/SVNstatus_vim | wincmd w
command! -nargs=0 SVNstatusx        e /tmp/SVNstatus_vim | bd /tmp/SVNstatus_vim | execute "!svn status $(ls) " . s:additionalSVNDirs . " | sort | grep -ve ^[?I] -ve \.mat > /tmp/SVNstatus_vim" | 10split | e /tmp/SVNstatus_vim | wincmd w
command! -nargs=+ SVNcommitMulti    execute "!svn commit --targets /tmp/SVNstatus_vim -m \"" . <q-args> . "\"" | SVNdiffoff 
command! -nargs=+ SVNcommit         execute "!svn commit \"%\" -m \"" . <q-args> . "\"" | SVNdiffoff
command! -nargs=0 SVNblame          call SvnBlame()
command! -nargs=0 SVNblameoff       call SvnBlameOff()
   
command! -nargs=0 GITdiff           diffoff! | execute "!git archive HEAD \"%\" | tar -x -C /tmp" | vert diffsplit /tmp/% | wincmd x | goto
command! -nargs=0 GITdiffoff        execute "bd /tmp/" . expand("%") | diffoff!
command! -nargs=0 GITstatus         e /tmp/GITstatus_vim | bd /tmp/GITstatus_vim | execute "!git status -s | sort | grep -ve ^[?I] -ve \.mat > /tmp/GITstatus_vim" | 10split | e /tmp/GITstatus_vim | wincmd w

command! -nargs=+ ReplaceCwordInFile execute "%s/" . expand( "<cword>" ) . "/" . <q-args> . "/g"
command! -nargs=0 Date              execute ".!date +\"\\%A \\%B \\%d \\%Y\""
command! -nargs=0 Hour              execute ".!date +\\%R" | startinsert! 

map <F3>   :FindInFiles 
map <C-F3> :ReplaceCwordInFile 
map <F8>   :Build<CR>
map <F5>   :Run<CR>
":map gb :call <SID>svnBlame()<CR>

runtime ftplugin/man.vim 

